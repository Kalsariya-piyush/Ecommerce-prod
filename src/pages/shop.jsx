import { useAuth } from '@/context/auth';
import { MenuItem, OutlinedInput, Select } from '@mui/material';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import Layout from '../layouts/Layout';
import { getBrands } from './api/brand';
import { getCategory } from './api/category';
import { getProductsHandler } from './api/products';

const Prices = [
  {
    id: '1',
    title: 'All Price',
  },
  {
    id: '2',
    title: 'Under $20',
  },
  {
    id: '3',
    title: '$25 to $100',
  },
  {
    id: '4',
    title: '$100 to $300',
  },
  {
    id: '5',
    title: '$300 to $500',
  },
  {
    id: '6',
    title: '$500 to $1,000',
  },
  {
    id: '7',
    title: '$1,000 to $10,000',
  },
];

const CartPage = () => {
  const [selected, setSelected] = useState('');

  const { currentUser, isLoadingUser } = useAuth();
  const router = useRouter();
  const [Categorys, setCategorys] = useState([]);
  const [Brands, setBrands] = useState([]);
  const [Products, setProducts] = useState([]);
  const [isLoadingCategory, setIsLoadingCategory] = useState(true);
  const [isLoadingBrand, setIsLoadingBrand] = useState(true);
  const [isLoadingProduct, setIsLoadingProduct] = useState(true);

  useEffect(() => {
    if (!currentUser && !isLoadingUser) {
      router.push('/login');
    }
  }, [currentUser, isLoadingUser]);

  const getCategoryHandler = async () => {
    setIsLoadingCategory(true);
    const res = await getCategory();
    setCategorys(res);
    setIsLoadingCategory(false);
  };

  const getBrandHandler = async () => {
    setIsLoadingBrand(true);
    const res = await getBrands();
    setBrands(res);
    setIsLoadingBrand(false);
  };

  const getProductDataHandler = async () => {
    setIsLoadingProduct(true);
    const res = await getProductsHandler();
    setProducts(res);
    setIsLoadingProduct(false);
  };

  useEffect(() => {
    getCategoryHandler();
    getBrandHandler();
    getProductDataHandler();
  }, []);

  console.log('pros', Products);

  return (
    <Layout>
      <div className="my-10 flex">
        <div className="max-w-[250px] w-full">
          <div className="flex flex-col gap-4">
            <h3 className="uppercase text-base font-medium">Category</h3>
            <div className="flex flex-col gap-3">
              {Categorys.map((item, index) => (
                <label
                  class={`radio-button ${
                    selected === index
                      ? 'font-medium text-gray-900'
                      : 'font-normal text-gray-700'
                  } text-sm`}
                  htmlFor={`Category${index}`}
                  onChange={() => {
                    setSelected(index);
                  }}
                >
                  <input
                    type="radio"
                    name="Category"
                    value="1"
                    id={`Category${index}`}
                  />{' '}
                  {item.title} <span></span>
                </label>
              ))}
            </div>
          </div>
          <br />
          <hr />
          <br />
          <div className="flex flex-col gap-4">
            <h3 className="uppercase text-base font-medium">Price Range</h3>
            <div className="flex flex-col gap-3">
              {Prices.map((item, index) => (
                <label
                  class={`radio-button ${
                    selected === index
                      ? 'font-medium text-gray-900'
                      : 'font-normal text-gray-700'
                  } text-sm`}
                  htmlFor={`Price${index}`}
                  onChange={() => {
                    setSelected(index);
                  }}
                >
                  <input
                    type="radio"
                    name="Price"
                    value="1"
                    id={`Price${index}`}
                  />{' '}
                  {item.title} <span></span>
                </label>
              ))}
            </div>
          </div>
          <br />
          <hr />
          <br />
          <div className="flex flex-col gap-4">
            <h3 className="uppercase text-base font-medium">popular Brands</h3>
            <div className="flex flex-col gap-3">
              {Brands.map((item, index) => (
                <>
                  <label class="cr-wrapper">
                    <input type="checkbox" />
                    <div class="cr-input"></div>
                    <span>{item.title}</span>
                  </label>
                </>
              ))}
            </div>
          </div>
        </div>
        <div className="w-full flex flex-col gap-4">
          <div className="w-full flex justify-between">
            <OutlinedInput
              id="outlined-adornment-weight"
              className="max-h-[44px] max-w-[424px] w-full"
              endAdornment={
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 20 20"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M9.0625 15.625C12.6869 15.625 15.625 12.6869 15.625 9.0625C15.625 5.43813 12.6869 2.5 9.0625 2.5C5.43813 2.5 2.5 5.43813 2.5 9.0625C2.5 12.6869 5.43813 15.625 9.0625 15.625Z"
                    stroke="#191C1F"
                    stroke-width="1.5"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M13.7031 13.7031L17.5 17.5"
                    stroke="#191C1F"
                    stroke-width="1.5"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              }
              inputProps={{
                'aria-label': 'search',
                placeholder: 'Search for anything...',
              }}
            />
            <div className="w-full"></div>

            <div className="flex gap-5 items-center w-full">
              <p>Sort by:</p>
              <Select
                displayEmpty
                inputProps={{ 'aria-label': '' }}
                className="max-h-[44px] max-w-[180px] w-full"
              >
                <MenuItem value="Most Popular">Most Popular</MenuItem>
                <MenuItem value="featured">featured</MenuItem>
                <MenuItem value="special">special</MenuItem>
              </Select>
            </div>
          </div>
          <div className="grid grid-cols-4 gap-4 w-full">
            {Products.map((item) => (
              <div className="max-w-[234px] max-h-[320px] h-full w-full border border-gray-100 p-4 flex flex-col gap-6">
                <div className="w-[202px] h-[172px]">
                  <img
                    src={
                      'https://www.simplilearn.com/ice9/free_resources_article_thumb/what_is_image_Processing.jpg'
                    }
                    className="h-full w-full"
                  />
                </div>

                <div className="flex flex-col gap-2">
                  <svg
                    width="114"
                    height="16"
                    viewBox="0 0 114 16"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M8.275 11.9188L11.425 13.9188C11.8312 14.175 12.3312 13.7938 12.2125 13.325L11.3 9.73752C11.2753 9.63807 11.2792 9.53369 11.3113 9.43638C11.3434 9.33907 11.4023 9.2528 11.4812 9.18752L14.3062 6.83127C14.675 6.52502 14.4875 5.90627 14.0062 5.87502L10.3187 5.63752C10.2181 5.63166 10.1214 5.59663 10.0404 5.53669C9.95935 5.47675 9.89754 5.39451 9.8625 5.30002L8.4875 1.83752C8.4511 1.73745 8.38479 1.65102 8.29758 1.58994C8.21037 1.52886 8.10647 1.49609 8 1.49609C7.89352 1.49609 7.78963 1.52886 7.70241 1.58994C7.6152 1.65102 7.54889 1.73745 7.5125 1.83752L6.1375 5.30002C6.10245 5.39451 6.04064 5.47675 5.95962 5.53669C5.87859 5.59663 5.78186 5.63166 5.68125 5.63752L1.99375 5.87502C1.5125 5.90627 1.325 6.52502 1.69375 6.83127L4.51875 9.18752C4.59771 9.2528 4.65661 9.33907 4.68868 9.43638C4.72075 9.53369 4.72467 9.63807 4.7 9.73752L3.85625 13.0625C3.7125 13.625 4.3125 14.0813 4.79375 13.775L7.725 11.9188C7.8072 11.8665 7.90259 11.8387 8 11.8387C8.09741 11.8387 8.1928 11.8665 8.275 11.9188Z"
                      fill="#FA8232"
                    />
                    <path
                      d="M24.275 11.9188L27.425 13.9188C27.8312 14.175 28.3312 13.7938 28.2125 13.325L27.3 9.73752C27.2753 9.63807 27.2792 9.53369 27.3113 9.43638C27.3434 9.33907 27.4023 9.2528 27.4812 9.18752L30.3062 6.83127C30.675 6.52502 30.4875 5.90627 30.0062 5.87502L26.3187 5.63752C26.2181 5.63166 26.1214 5.59663 26.0404 5.53669C25.9594 5.47675 25.8975 5.39451 25.8625 5.30002L24.4875 1.83752C24.4511 1.73745 24.3848 1.65102 24.2976 1.58994C24.2104 1.52886 24.1065 1.49609 24 1.49609C23.8935 1.49609 23.7896 1.52886 23.7024 1.58994C23.6152 1.65102 23.5489 1.73745 23.5125 1.83752L22.1375 5.30002C22.1025 5.39451 22.0406 5.47675 21.9596 5.53669C21.8786 5.59663 21.7819 5.63166 21.6812 5.63752L17.9937 5.87502C17.5125 5.90627 17.325 6.52502 17.6937 6.83127L20.5187 9.18752C20.5977 9.2528 20.6566 9.33907 20.6887 9.43638C20.7207 9.53369 20.7247 9.63807 20.7 9.73752L19.8562 13.0625C19.7125 13.625 20.3125 14.0813 20.7937 13.775L23.725 11.9188C23.8072 11.8665 23.9026 11.8387 24 11.8387C24.0974 11.8387 24.1928 11.8665 24.275 11.9188Z"
                      fill="#FA8232"
                    />
                    <path
                      d="M40.275 11.9188L43.425 13.9188C43.8312 14.175 44.3312 13.7938 44.2125 13.325L43.3 9.73752C43.2753 9.63807 43.2792 9.53369 43.3113 9.43638C43.3434 9.33907 43.4023 9.2528 43.4812 9.18752L46.3062 6.83127C46.675 6.52502 46.4875 5.90627 46.0062 5.87502L42.3187 5.63752C42.2181 5.63166 42.1214 5.59663 42.0404 5.53669C41.9594 5.47675 41.8975 5.39451 41.8625 5.30002L40.4875 1.83752C40.4511 1.73745 40.3848 1.65102 40.2976 1.58994C40.2104 1.52886 40.1065 1.49609 40 1.49609C39.8935 1.49609 39.7896 1.52886 39.7024 1.58994C39.6152 1.65102 39.5489 1.73745 39.5125 1.83752L38.1375 5.30002C38.1025 5.39451 38.0406 5.47675 37.9596 5.53669C37.8786 5.59663 37.7819 5.63166 37.6812 5.63752L33.9937 5.87502C33.5125 5.90627 33.325 6.52502 33.6937 6.83127L36.5187 9.18752C36.5977 9.2528 36.6566 9.33907 36.6887 9.43638C36.7207 9.53369 36.7247 9.63807 36.7 9.73752L35.8562 13.0625C35.7125 13.625 36.3125 14.0813 36.7937 13.775L39.725 11.9188C39.8072 11.8665 39.9026 11.8387 40 11.8387C40.0974 11.8387 40.1928 11.8665 40.275 11.9188Z"
                      fill="#FA8232"
                    />
                    <path
                      d="M56.275 11.9188L59.425 13.9188C59.8312 14.175 60.3312 13.7938 60.2125 13.325L59.3 9.73752C59.2753 9.63807 59.2792 9.53369 59.3113 9.43638C59.3434 9.33907 59.4023 9.2528 59.4812 9.18752L62.3062 6.83127C62.675 6.52502 62.4875 5.90627 62.0062 5.87502L58.3187 5.63752C58.2181 5.63166 58.1214 5.59663 58.0404 5.53669C57.9594 5.47675 57.8975 5.39451 57.8625 5.30002L56.4875 1.83752C56.4511 1.73745 56.3848 1.65102 56.2976 1.58994C56.2104 1.52886 56.1065 1.49609 56 1.49609C55.8935 1.49609 55.7896 1.52886 55.7024 1.58994C55.6152 1.65102 55.5489 1.73745 55.5125 1.83752L54.1375 5.30002C54.1025 5.39451 54.0406 5.47675 53.9596 5.53669C53.8786 5.59663 53.7819 5.63166 53.6812 5.63752L49.9937 5.87502C49.5125 5.90627 49.325 6.52502 49.6937 6.83127L52.5187 9.18752C52.5977 9.2528 52.6566 9.33907 52.6887 9.43638C52.7207 9.53369 52.7247 9.63807 52.7 9.73752L51.8562 13.0625C51.7125 13.625 52.3125 14.0813 52.7937 13.775L55.725 11.9188C55.8072 11.8665 55.9026 11.8387 56 11.8387C56.0974 11.8387 56.1928 11.8665 56.275 11.9188Z"
                      fill="#FA8232"
                    />
                    <path
                      d="M72.275 11.9188L75.425 13.9188C75.8312 14.175 76.3312 13.7938 76.2125 13.325L75.3 9.73752C75.2753 9.63807 75.2792 9.53369 75.3113 9.43638C75.3434 9.33907 75.4023 9.2528 75.4812 9.18752L78.3062 6.83127C78.675 6.52502 78.4875 5.90627 78.0062 5.87502L74.3187 5.63752C74.2181 5.63166 74.1214 5.59663 74.0404 5.53669C73.9594 5.47675 73.8975 5.39451 73.8625 5.30002L72.4875 1.83752C72.4511 1.73745 72.3848 1.65102 72.2976 1.58994C72.2104 1.52886 72.1065 1.49609 72 1.49609C71.8935 1.49609 71.7896 1.52886 71.7024 1.58994C71.6152 1.65102 71.5489 1.73745 71.5125 1.83752L70.1375 5.30002C70.1025 5.39451 70.0406 5.47675 69.9596 5.53669C69.8786 5.59663 69.7819 5.63166 69.6812 5.63752L65.9937 5.87502C65.5125 5.90627 65.325 6.52502 65.6937 6.83127L68.5187 9.18752C68.5977 9.2528 68.6566 9.33907 68.6887 9.43638C68.7207 9.53369 68.7247 9.63807 68.7 9.73752L67.8562 13.0625C67.7125 13.625 68.3125 14.0813 68.7937 13.775L71.725 11.9188C71.8072 11.8665 71.9026 11.8387 72 11.8387C72.0974 11.8387 72.1928 11.8665 72.275 11.9188Z"
                      fill="#FA8232"
                    />
                    <path
                      d="M87.312 2.874C86.904 3.65 86.568 4.5 86.304 5.424C86.04 6.344 85.908 7.278 85.908 8.226C85.908 9.126 86.02 10.004 86.244 10.86C86.468 11.712 86.792 12.586 87.216 13.482H86.46C86.128 12.922 85.84 12.368 85.596 11.82C85.356 11.272 85.168 10.704 85.032 10.116C84.9 9.528 84.834 8.894 84.834 8.214C84.834 7.222 84.994 6.27 85.314 5.358C85.634 4.442 86.046 3.614 86.55 2.874H87.312ZM88.1908 3.324H94.2808V4.284C93.9728 4.704 93.6668 5.182 93.3628 5.718C93.0628 6.25 92.7768 6.808 92.5048 7.392C92.2328 7.972 91.9888 8.546 91.7728 9.114C91.5568 9.678 91.3768 10.21 91.2328 10.71C91.0928 11.206 91.0028 11.636 90.9628 12H89.7568C89.8208 11.604 89.9348 11.114 90.0988 10.53C90.2668 9.946 90.4868 9.308 90.7588 8.616C91.0308 7.92 91.3588 7.202 91.7428 6.462C92.1268 5.722 92.5668 4.996 93.0628 4.284H88.1908V3.324ZM95.2955 5.85C95.2955 5.29 95.4315 4.814 95.7035 4.422C95.9755 4.026 96.3375 3.724 96.7895 3.516C97.2455 3.308 97.7475 3.204 98.2955 3.204C98.8955 3.204 99.4255 3.292 99.8855 3.468C100.345 3.64 100.705 3.892 100.965 4.224C101.225 4.556 101.355 4.962 101.355 5.442C101.355 5.87 101.219 6.258 100.947 6.606C100.675 6.95 100.259 7.22 99.6995 7.416C100.079 7.52 100.411 7.672 100.695 7.872C100.979 8.072 101.199 8.318 101.355 8.61C101.511 8.898 101.589 9.23 101.589 9.606C101.589 10.002 101.505 10.358 101.337 10.674C101.173 10.986 100.941 11.252 100.641 11.472C100.341 11.688 99.9875 11.854 99.5795 11.97C99.1715 12.082 98.7275 12.136 98.2475 12.132C97.6515 12.128 97.1255 12.018 96.6695 11.802C96.2175 11.586 95.8615 11.284 95.6015 10.896C95.3415 10.504 95.2015 10.04 95.1815 9.504H96.2915C96.3755 10.044 96.5955 10.458 96.9515 10.746C97.3075 11.034 97.7535 11.178 98.2895 11.178C98.7135 11.178 99.0835 11.112 99.3995 10.98C99.7155 10.844 99.9595 10.658 100.131 10.422C100.303 10.186 100.389 9.91 100.389 9.594C100.389 9.246 100.293 8.952 100.101 8.712C99.9095 8.472 99.6475 8.29 99.3155 8.166C98.9835 8.038 98.6135 7.972 98.2055 7.968L97.4255 7.95V7.008L98.1695 6.99C98.5495 6.982 98.8895 6.91 99.1895 6.774C99.4895 6.634 99.7255 6.452 99.8975 6.228C100.073 6 100.161 5.75 100.161 5.478C100.161 5.238 100.087 5.016 99.9395 4.812C99.7915 4.604 99.5775 4.438 99.2975 4.314C99.0215 4.19 98.6855 4.128 98.2895 4.128C97.9775 4.128 97.6795 4.19 97.3955 4.314C97.1115 4.434 96.8775 4.62 96.6935 4.872C96.5095 5.124 96.4115 5.45 96.3995 5.85H95.2955ZM105.976 3.204C106.532 3.204 107.03 3.296 107.47 3.48C107.91 3.664 108.258 3.932 108.514 4.284C108.77 4.636 108.898 5.064 108.898 5.568C108.898 6.04 108.77 6.436 108.514 6.756C108.262 7.076 107.936 7.32 107.536 7.488C107.828 7.544 108.106 7.68 108.37 7.896C108.638 8.112 108.858 8.374 109.03 8.682C109.202 8.99 109.288 9.312 109.288 9.648C109.288 10.148 109.15 10.584 108.874 10.956C108.602 11.328 108.218 11.618 107.722 11.826C107.226 12.03 106.644 12.132 105.976 12.132C105.312 12.132 104.732 12.03 104.236 11.826C103.74 11.618 103.354 11.328 103.078 10.956C102.806 10.584 102.67 10.148 102.67 9.648C102.67 9.312 102.754 8.99 102.922 8.682C103.094 8.374 103.314 8.112 103.582 7.896C103.85 7.68 104.13 7.544 104.422 7.488C104.026 7.32 103.698 7.076 103.438 6.756C103.182 6.436 103.054 6.04 103.054 5.568C103.054 5.064 103.182 4.636 103.438 4.284C103.694 3.932 104.042 3.664 104.482 3.48C104.926 3.296 105.424 3.204 105.976 3.204ZM105.976 7.02C106.504 7.02 106.932 6.89 107.26 6.63C107.592 6.37 107.758 6.008 107.758 5.544C107.758 5.076 107.592 4.708 107.26 4.44C106.928 4.168 106.5 4.032 105.976 4.032C105.452 4.032 105.024 4.168 104.692 4.44C104.36 4.712 104.194 5.08 104.194 5.544C104.194 6.008 104.36 6.37 104.692 6.63C105.024 6.89 105.452 7.02 105.976 7.02ZM105.976 11.232C106.62 11.232 107.134 11.088 107.518 10.8C107.902 10.508 108.094 10.122 108.094 9.642C108.094 9.326 108.006 9.044 107.83 8.796C107.658 8.548 107.414 8.354 107.098 8.214C106.782 8.07 106.408 7.998 105.976 7.998C105.548 7.998 105.176 8.07 104.86 8.214C104.548 8.354 104.304 8.548 104.128 8.796C103.956 9.044 103.87 9.326 103.87 9.642C103.87 10.122 104.06 10.508 104.44 10.8C104.824 11.088 105.336 11.232 105.976 11.232ZM110.097 2.874H110.859C111.363 3.614 111.775 4.442 112.095 5.358C112.415 6.27 112.575 7.222 112.575 8.214C112.575 8.894 112.507 9.528 112.371 10.116C112.239 10.704 112.051 11.272 111.807 11.82C111.567 12.368 111.281 12.922 110.949 13.482H110.193C110.617 12.586 110.941 11.712 111.165 10.86C111.389 10.004 111.501 9.126 111.501 8.226C111.501 7.278 111.369 6.344 111.105 5.424C110.841 4.5 110.505 3.65 110.097 2.874Z"
                      fill="#77878F"
                    />
                  </svg>

                  <p className="text-sm font-normal text-gray-900">
                    <span>{item.title}</span>
                    <span
                      dangerouslySetInnerHTML={{
                        __html: `${item.description}`,
                      }}
                    />
                  </p>
                  <p className="text-sm font-semibold text-secondary-500">
                    ${item.price}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default CartPage;
